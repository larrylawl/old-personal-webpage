I"³<h2 id="the-problem">The problem</h2>

<p>Why am I getting an <code class="highlighter-rouge">UnboundLocalError</code> when my variable has a value?</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="mi">10</span>
<span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="n">foo</span><span class="p">()</span>
</code></pre></div></div>

<p>(Skip to the documentation directly <a href="https://docs.python.org/3/faq/programming.html">here</a>.
Read on if you donâ€™t understand the docs)</p>

<h2 id="the-explanation">The explanation</h2>

<p>This explanation from the docs clears things up:</p>

<blockquote>
  <p>In Python, variables that are only referenced inside a function are implicitly global.<br /></p>
</blockquote>

<blockquote>
  <p>If a variable is assigned a value anywhere within the functionâ€™s body, itâ€™s assumed to be a local unless explicitly
declared as global.</p>
</blockquote>

<p>Line 2 is implemented so as to prevent programmers from unintentionally manipulating the value of global variables.</p>

<h2 id="the-solution">The solution</h2>

<p>Use the <code class="highlighter-rouge">global</code> keyword. This explicit declaration tells python (and yourself) that you are referencing the
<code class="highlighter-rouge">global</code> variable.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="mi">10</span>
<span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">x</span>
    <span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="n">foo</span><span class="p">()</span>
</code></pre></div></div>

<p>Use the <code class="highlighter-rouge">nonlocal</code> keyword. <code class="highlighter-rouge">nonlocal</code> causes the listed identifier to refer to <em>previously bound variables</em> in
the <em>nearest enclosing scope excluding globals</em>. Note that <code class="highlighter-rouge">for-loops</code> in Python do not create a local scope (unlike Java).
Docs <a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-nonlocal-stmt">here</a></p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>
    <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span>
    <span class="k">def</span> <span class="nf">bar</span><span class="p">():</span>
        <span class="k">nonlocal</span> <span class="n">x</span>
        <span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="n">bar</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="n">foo</span><span class="p">()</span>
</code></pre></div></div>
:ET